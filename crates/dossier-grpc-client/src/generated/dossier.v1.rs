// This file is @generated by prost-build.
/// Request for generating person dossier
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PersonDossierRequest {
    #[prost(string, tag = "1")]
    pub zoho_contact_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub linkedin_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub linkedin_profile_json: ::prost::alloc::string::String,
}
/// Request for generating company dossier
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompanyDossierRequest {
    /// Required: The company website URL to scrape
    #[prost(string, tag = "1")]
    pub company_url: ::prost::alloc::string::String,
    /// Optional: Location for address proximity validation
    #[prost(string, tag = "2")]
    pub preferred_location: ::prost::alloc::string::String,
}
/// Request for generating both dossiers
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BothDossiersRequest {
    #[prost(string, tag = "1")]
    pub zoho_contact_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub linkedin_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub linkedin_profile_json: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub extract_address: bool,
    #[prost(bool, tag = "5")]
    pub extract_company_name: bool,
    /// Optional location for address proximity validation
    #[prost(string, tag = "6")]
    pub preferred_location: ::prost::alloc::string::String,
}
/// Request for extracting address from company dossier
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddressExtractionRequest {
    /// Company dossier content in markdown format
    #[prost(string, tag = "1")]
    pub company_dossier_markdown: ::prost::alloc::string::String,
    /// Optional: expected company name to improve extraction accuracy
    #[prost(string, optional, tag = "2")]
    pub expected_company_name: ::core::option::Option<::prost::alloc::string::String>,
}
/// Request for extracting company name from company dossier
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompanyNameExtractionRequest {
    /// Company dossier content in markdown format
    #[prost(string, tag = "1")]
    pub company_dossier_markdown: ::prost::alloc::string::String,
}
/// Person dossier with specific fields
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PersonDossier {
    /// Markdown content of the person dossier
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    /// Person's full name
    #[prost(string, tag = "2")]
    pub full_name: ::prost::alloc::string::String,
    /// Current job title
    #[prost(string, tag = "3")]
    pub current_title: ::prost::alloc::string::String,
    /// Current company (from LinkedIn profile)
    #[prost(string, tag = "4")]
    pub current_company: ::prost::alloc::string::String,
    /// LinkedIn profile URL
    #[prost(string, tag = "5")]
    pub linkedin_url: ::prost::alloc::string::String,
    /// Key skills extracted
    #[prost(string, repeated, tag = "6")]
    pub skills: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Generation metadata
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<DossierMetadata>,
}
/// Company dossier with specific fields and extracted data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompanyDossier {
    /// Markdown content of the company dossier
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    /// Extracted company name
    #[prost(string, tag = "2")]
    pub company_name: ::prost::alloc::string::String,
    /// Company website URL
    #[prost(string, tag = "3")]
    pub website_url: ::prost::alloc::string::String,
    /// Industry/sector
    #[prost(string, tag = "4")]
    pub industry: ::prost::alloc::string::String,
    /// Extracted mailing address (if found and requested)
    #[prost(message, optional, tag = "5")]
    pub mailing_address: ::core::option::Option<ExtractedAddress>,
    /// Whether address was successfully extracted
    #[prost(bool, tag = "6")]
    pub address_found: bool,
    /// Contact information
    #[prost(message, optional, tag = "7")]
    pub contact_info: ::core::option::Option<ContactInfo>,
    /// Generation metadata
    #[prost(message, optional, tag = "8")]
    pub metadata: ::core::option::Option<DossierMetadata>,
}
/// Bundle containing both dossiers
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DossierBundle {
    #[prost(message, optional, tag = "1")]
    pub person_dossier: ::core::option::Option<PersonDossier>,
    #[prost(message, optional, tag = "2")]
    pub company_dossier: ::core::option::Option<CompanyDossier>,
    /// ISO 8601 timestamp
    #[prost(string, tag = "3")]
    pub generated_at: ::prost::alloc::string::String,
}
/// Metadata about dossier generation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DossierMetadata {
    /// Generation status: "success", "failed", "partial"
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    /// Processing time in seconds
    #[prost(double, tag = "2")]
    pub processing_time: f64,
    /// Error message if generation failed
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Word count of the content
    #[prost(int32, tag = "4")]
    pub word_count: i32,
    /// Source URLs that were scraped (for company dossier)
    #[prost(string, repeated, tag = "5")]
    pub source_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Quality indicators
    #[prost(bool, tag = "6")]
    pub has_complete_info: bool,
    /// 0.0 to 1.0
    #[prost(double, tag = "7")]
    pub confidence_score: f64,
}
/// Extracted mailing address
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtractedAddress {
    /// Street name and house number (corresponds to Mailing_Street)
    #[prost(string, tag = "1")]
    pub street: ::prost::alloc::string::String,
    /// City name (corresponds to Mailing_City)
    #[prost(string, tag = "2")]
    pub city: ::prost::alloc::string::String,
    /// Postal/ZIP code (corresponds to Mailing_Zip)
    #[prost(string, tag = "3")]
    pub postal_code: ::prost::alloc::string::String,
    /// State or region (corresponds to Mailing_State)
    #[prost(string, tag = "4")]
    pub state: ::prost::alloc::string::String,
    /// Country (corresponds to Mailing_Country)
    #[prost(string, tag = "5")]
    pub country: ::prost::alloc::string::String,
    /// Full formatted address as single string
    #[prost(string, tag = "6")]
    pub formatted_address: ::prost::alloc::string::String,
    /// Extraction confidence score (0.0 to 1.0)
    #[prost(double, tag = "7")]
    pub confidence: f64,
    /// Source where address was found
    #[prost(string, tag = "8")]
    pub source: ::prost::alloc::string::String,
    /// Whether this was successfully extracted
    #[prost(bool, tag = "9")]
    pub found: bool,
}
/// Company contact information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContactInfo {
    #[prost(string, tag = "1")]
    pub phone: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub fax: ::prost::alloc::string::String,
    /// Social media handles (key: platform, value: handle/url)
    #[prost(map = "string, string", tag = "4")]
    pub social_media: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Extracted company information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtractedCompanyInfo {
    /// Primary company name
    #[prost(string, tag = "1")]
    pub company_name: ::prost::alloc::string::String,
    /// Alternative names/variations found
    #[prost(string, repeated, tag = "2")]
    pub alternative_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Legal entity name if different
    #[prost(string, tag = "3")]
    pub legal_name: ::prost::alloc::string::String,
    /// Whether extraction was successful
    #[prost(bool, tag = "4")]
    pub found: bool,
    /// Extraction confidence (0.0 to 1.0)
    #[prost(double, tag = "5")]
    pub confidence: f64,
}
/// Error codes for dossier service operations
/// These are used in the gRPC rich error model via grpc-status metadata
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorCode {
    Unspecified = 0,
    /// MCP server is not responding
    McpServerUnavailable = 1,
    /// MCP server up but browser not working
    McpBrowserFailed = 2,
    /// Invalid or malformed LinkedIn data
    LinkedinProfileInvalid = 3,
    /// No website found in profile
    CompanyWebsiteNotFound = 4,
    /// Website exists but can't be scraped
    WebsiteScrapingFailed = 5,
    /// OpenAI API failures
    AiServiceError = 6,
    /// Operation exceeded time limit
    Timeout = 7,
}
impl ErrorCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ErrorCode::Unspecified => "ERROR_CODE_UNSPECIFIED",
            ErrorCode::McpServerUnavailable => "MCP_SERVER_UNAVAILABLE",
            ErrorCode::McpBrowserFailed => "MCP_BROWSER_FAILED",
            ErrorCode::LinkedinProfileInvalid => "LINKEDIN_PROFILE_INVALID",
            ErrorCode::CompanyWebsiteNotFound => "COMPANY_WEBSITE_NOT_FOUND",
            ErrorCode::WebsiteScrapingFailed => "WEBSITE_SCRAPING_FAILED",
            ErrorCode::AiServiceError => "AI_SERVICE_ERROR",
            ErrorCode::Timeout => "TIMEOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR_CODE_UNSPECIFIED" => Some(Self::Unspecified),
            "MCP_SERVER_UNAVAILABLE" => Some(Self::McpServerUnavailable),
            "MCP_BROWSER_FAILED" => Some(Self::McpBrowserFailed),
            "LINKEDIN_PROFILE_INVALID" => Some(Self::LinkedinProfileInvalid),
            "COMPANY_WEBSITE_NOT_FOUND" => Some(Self::CompanyWebsiteNotFound),
            "WEBSITE_SCRAPING_FAILED" => Some(Self::WebsiteScrapingFailed),
            "AI_SERVICE_ERROR" => Some(Self::AiServiceError),
            "TIMEOUT" => Some(Self::Timeout),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod dossier_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// DossierService provides operations for generating and managing dossiers
    #[derive(Debug, Clone)]
    pub struct DossierServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DossierServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DossierServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DossierServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            DossierServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Generate person dossier from LinkedIn profile data
        pub async fn generate_person_dossier(
            &mut self,
            request: impl tonic::IntoRequest<super::PersonDossierRequest>,
        ) -> std::result::Result<tonic::Response<super::PersonDossier>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dossier.v1.DossierService/GeneratePersonDossier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dossier.v1.DossierService", "GeneratePersonDossier"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Generate company dossier from company website URL
        pub async fn generate_company_dossier(
            &mut self,
            request: impl tonic::IntoRequest<super::CompanyDossierRequest>,
        ) -> std::result::Result<tonic::Response<super::CompanyDossier>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dossier.v1.DossierService/GenerateCompanyDossier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dossier.v1.DossierService",
                        "GenerateCompanyDossier",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Generate both dossiers in one call
        pub async fn generate_both_dossiers(
            &mut self,
            request: impl tonic::IntoRequest<super::BothDossiersRequest>,
        ) -> std::result::Result<tonic::Response<super::DossierBundle>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dossier.v1.DossierService/GenerateBothDossiers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dossier.v1.DossierService", "GenerateBothDossiers"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Extract structured address from company dossier content
        pub async fn extract_address_from_dossier(
            &mut self,
            request: impl tonic::IntoRequest<super::AddressExtractionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExtractedAddress>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dossier.v1.DossierService/ExtractAddressFromDossier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dossier.v1.DossierService",
                        "ExtractAddressFromDossier",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Extract company name from company dossier content
        pub async fn extract_company_name_from_dossier(
            &mut self,
            request: impl tonic::IntoRequest<super::CompanyNameExtractionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExtractedCompanyInfo>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dossier.v1.DossierService/ExtractCompanyNameFromDossier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dossier.v1.DossierService",
                        "ExtractCompanyNameFromDossier",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
