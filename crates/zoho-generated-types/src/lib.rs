// Include the generated client code
include!(concat!(env!("OUT_DIR"), "/zoho_tasks_client.rs"));

// Re-export the main types for easy access
pub use Client as ZohoTasksClient;
// Note: The types module is generated by progenitor when it successfully parses the OpenAPI spec
// If types module doesn't exist, it means the OpenAPI spec couldn't be processed
pub use types::*;

#[cfg(test)]
mod tests {
    use super::types::*;

    #[test]
    fn test_contact_reference_structure() {
        // Test that ContactReference has the expected structure
        let contact = ContactReference {
            id: "contact-123".to_string(),
            name: Some("John Doe".to_string()),
        };
        assert_eq!(contact.id, "contact-123");
        assert_eq!(contact.name.as_deref(), Some("John Doe"));
    }
    
    #[test]
    fn test_tasks_response_structure() {
        // Test that the generated TasksResponse type has the expected structure
        // We can't test field values without knowing the exact generated structure,
        // but we can verify the types compile correctly
        
        // Test Who_Id structure
        let _who = TasksResponseWhoId {
            id: "contact-789".to_string(),
            name: Some("Jane Smith".to_string()),
        };
        
        // Test What_Id structure  
        let _what = TasksResponseWhatId {
            id: "deal-123".to_string(),
            name: Some("Big Deal".to_string()),
        };
        
        // If this compiles, the basic structure is correct
        // The actual TasksResponse creation would require all fields to be specified
        // which varies based on the generated spec
    }
}
